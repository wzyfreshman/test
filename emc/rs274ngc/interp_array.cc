/********************************************************************
* Description: interp_array.cc
*
*   This file just allocates space for the static arrays used by the
*   interpreter.
*
* Author:
* License: GPL Version 2
* System: Linux
*    
* Copyright (c) 2004 All rights reserved.
********************************************************************/
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/stat.h>
#include "rs274ngc.hh"
#include "rs274ngc_return.hh"
#include "rs274ngc_interp.hh"
#include "interp_internal.hh"	// interpreter private definitions

/* Interpreter global arrays for g_codes and m_codes. The nth entry
in each array is the modal group number corresponding to the nth
code. Entries which are -1 represent illegal codes. Remember g_codes
in this interpreter are multiplied by 10.

The modal g groups and group numbers defined in [NCMS, pages 71 - 73]
(see also [Fanuc, pages 43 - 45]) are used here, except the canned
cycles (g80 - g89), which comprise modal g group 9 in [Fanuc], are
treated here as being in the same modal group (group 1) with the
straight moves and arcs (g0, g1, g2,g3).  [Fanuc, page 45] says only
one g_code from any one group may appear on a line, and we are
following that rule. The straight_probe move, g38.2, is in group 1; it
is not defined in [NCMS].

Some g_codes are non-modal (g4, g10, g28, g30, g53, g92, g92.1, g92.2,
and g92.3 here - many more in [NCMS]). [Fanuc] and [NCMS] put all
these in the same group 0, so we do also. Logically, there are two
subgroups, those which require coordinate values (g10, g28, g30, and
g92) and those which do not (g4, g53, g92.1, g92.2, and g92.3).
The subgroups are identified by itemization when necessary.

Those in group 0 which require coordinate values may not be on the
same line as those in group 1 (except g80) because they would be
competing for the coordinate values. Others in group 0 may be used on
the same line as those in group 1.

A total of 52 G-codes are implemented.

The groups are:
group  0 = {g4,g10,g28,g30,g53,g92,g92.1,g92.2,g92.3,g68,g69} - NON-MODAL
            dwell, setup, return to ref1, return to ref2,
            motion in machine coordinates, set and unset axis offsets
group  1 = {g0,g1,g2,g3,g33,g33.1,g38.2,g38.3,g38.4,g38.5,g73,g76,g80,g81,g82,g83,g84,g85,g86,g87,g88,g89} - motion
group  2 = {g17,g17.1,g18,g18.1,g19,g19.1}   - plane selection
group  3 = {g90,g91}       - distance mode
group  4 = {g90.1,g91.1}   - arc IJK distance mode
group  5 = {g93,g94,g95}   - feed rate mode
group  6 = {g20,g21}       - units
group  7 = {g40,g41,g42}   - cutter diameter compensation
group  8 = {g43,g49}       - tool length offset
group 10 = {g98,g99}       - return mode in canned cycles
group 12 = {g54,g55,g56,g57,g58,g59,g59.1,g59.2,g59.3,g59.4,g59.5,g95.6} - coordinate system //g59.4,g59.5 hong-2014-06-04
group 13 = {g61,g61.1,g64} - control mode (path following)
group 14 = {g96,g97}       - spindle speed mode
group 15 = {G07,G08}       - lathe diameter mode
*/
// This stops indent from reformatting the following code.
// *INDENT-OFF*
//2015-08-31 g68  g69 add by hong to rotate the coordinate system
const int Interp::_gees[] = {
/*   0 */   1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/*  20 */   1,1,1,-1,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/*  40 */ //0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/*  40 */   0,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1, 1, 1, 0,-1,-1,-1,-1,-1,-1,
/*  60 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,15,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/*  80 */  15,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 100 */   0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 120 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 140 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 160 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,
/* 180 */   2, 2,-1,-1,-1,-1,-1,-1,-1,-1, 2, 2,-1,-1,-1,-1,-1,-1,-1,-1,
/* 200 */   6,-1,-1,-1,-1,-1,-1,-1,-1,-1, 6,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 220 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 240 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 260 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 280 */   0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 300 */   0, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 320 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1, 1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 340 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 360 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 380 */  -1,-1, 1, 1, 1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 400 */   7,-1,-1,-1,-1,-1,-1,-1,-1,-1, 7, 7,-1,-1,-1,-1,-1,-1,-1,-1,
/* 420 */   7, 7,-1,-1,-1,-1,-1,-1,-1,-1, 8, 8,-1,-1,8,-1,-1,-1,-1,-1,
/* 440 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 460 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 480 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 8,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 500 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 520 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 0,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 540 */  12,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 560 */  12,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 580 */  12,-1,-1,-1,-1,-1,-1,-1,-1,-1,12,12,12,12,12,12,12,-1,-1,-1,
/* 600 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,13,13,-1,-1,-1,-1,-1,-1,-1,-1,
/* 620 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 640 */  13,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 660 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 680 */  0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 700 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 720 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 740 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 760 */   1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 780 */  -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 800 */   1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 820 */   1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 840 */   1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 860 */   1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 880 */   1,-1,-1,-1,-1,-1,-1,-1,-1,-1, 1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 900 */   3, 4,-1,-1,-1,-1,-1,-1,-1,-1, 3, 4,-1,-1,-1,-1,-1,-1,-1,-1,
/* 920 */   0, 0, 0, 0,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 940 */   5,-1,-1,-1,-1,-1,-1,-1,-1,-1, 5,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 960 */  14,-1,-1,-1,-1,-1,-1,-1,-1,-1,14,-1,-1,-1,-1,-1,-1,-1,-1,-1,
/* 980 */  10,-1,-1,-1,-1,-1,-1,-1,-1,-1,10,-1,-1,-1,-1,-1,-1,-1,-1,-1};

/*

Modal groups and modal group numbers for M codes are not described in
[Fanuc]. We have used the groups from [NCMS] and added M60, as an
extension of the language for pallet shuttle and stop. This version has
no codes related to axis clamping.

The groups are:
group 4 = {m0,m1,m2,m30,m60,m99} - stopping
group 5 = {m62,m63,m64,m65,  - turn I/O point on/off
           m66
            m71 m72}add by hong -2014-08-23  - wait for Input
group 6 = {m6,m61,m90}           - tool change
group 7 = {m3,m4,m5}         - spindle turning
group 8 = {m7,m8,m9,m8.1}         - coolant
group 9 = {m48,m49,          - feed and speed override switch bypass
           m50,              - feed override switch bypass           P1 to turn on, P0 to turn off
	   m51,              - spindle speed override switch bypass  P1 to turn on, P0 to turn off
	   m52,              - adaptive feed override switch bypass  P1 to turn on, P0 to turn off
	   m53}              - feedstop override switch bypass       P1 to turn on, P0 to turn off
group 10 = {m100..m199}      - user-defined
group 11={m200...m299}      -user-define g-code
*/

//hong-2014/04/15 add the m99 to group 4
//hong-2014-05-24 add the m90 to group 6
//hong-2014-08-23 add m71 m72 to group 5
//hong-2014-09-20 add the m91 to group 5
//hong-2014-11-06 add the m54 to group 9
//hong-2015-11-03 add the m70 to group 5
//hong-2016-02-17 add the m80 to group 5
const int Interp::_ems[] = {
   4,  4,  4,  7,  7,  7,  6,  8,  8,  8,  //  9
  8, 8, -1, -1, -1, -1, -1, -1, -1, -1,  // 19
  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  // 29
   4, -1, -1, -1, -1, -1, -1, -1, -1, -1,  // 39
  -1, -1, -1, -1, -1, -1, -1, -1,  9,  9,  // 49
   9,  9,  9,  9,  9, -1, -1, -1, -1, -1,  // 59
   4,  6,  5,  5,  5,  5,  5,  5,  5, -1,  // 69
  5, 5, 5, -1, -1, -1, -1, -1, -1, -1,  // 79
  5, -1, -1, -1, -1, -1, -1, -1, -1, -1,  // 89
  6, 5, -1, -1, -1, -1, -1, -1, -1, 4,  // 99
   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, //109
   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, //119
   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, //129
   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, //139
   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, //149
   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, //159
   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, //169
   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, //179
   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, //189
   10, 10, 10, 10, 10, 10, 10, 10, 10, 10, //199
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, //209
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, //219
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, //229
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, //239
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, //249
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, //259
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, //269
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, //279
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11, //289
    11, 11, 11, 11, 11, 11, 11, 11, 11, 11};//299

/*

This is an array of the index numbers of system parameters that must
be included in a file used with the Interp::restore_parameters
function. The array is used by that function and by the
Interp::save_parameters function.

*/

const int Interp::_required_parameters[] = {
 3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3009, /* USE FOR RUBBER */
 3010, 3011, 3012, 3013, 3014, 3015, 3016, 3017, 3018, 3019,
 3020,3021,3022,3023,3024,3025,3026,3027,3028,3029,3030,
 3031,3032,3033,3034,3035,3036,3037,3038,3039,3040,
 3041,3042,3043,3044,3045,3046,3047,3048,3049,3050,
 3051,3052,3053,3054,3055,3056,3057,3058,3059,3060,

    3110, 3111, 3112, 3113, 3114, 3115, 3116, 3117, 3118, 3119,
    3120,3121,3122,3123,3124,3125,3126,3127,3128,3129,3130,

    3200,3201,3202,3203,3204,3205,3206,3207,3208,3209,
    3210,3211,3212,3213,3214,3215,3216,3217,3218,3219,
    3220,3221,3222,3223,3224,3225,3226,3227,3228,3229,
    3230,3231,3232,3233,3234,3235,3236,3237,3238,3239,
    3240,3241,3242,3243,3244,3245,3246,3247,3248,3249,
    3250,3251,3252,3253,3254,3255,3256,3257,3258,3259,
    3260,3261,3262,3263,3264,3265,3266,3267,3268,3269,
    3270,3271,3272,3273,3274,3275,3276,3277,3278,3279,
    3280,3281,3282,3283,3284,3285,3286,3287,3288,3289,
    3290,3291,3292,3293,3294,3295,3296,3297,3298,3299,

    3600, 3601, 3602, 3603, 3604, 3605, 3606, 3607, 3608, 3609,
    3610, 3611, 3612, 3613, 3614, 3615, 3616, 3617, 3618, 3619,
    3620, 3621, 3622, 3623, 3624, 3625, 3626, 3627, 3628, 3629,
    3630, 3631, 3632, 3633, 3634, 3635, 3636, 3637, 3638, 3639,
    3640, 3641, 3642, 3643, 3644, 3645, 3646, 3647, 3648, 3649,
    3650, 3651, 3652, 3653, 3654, 3655, 3656, 3657, 3658, 3659,

    3810, 3811, 3812, 3813, 3814, 3815, 3816, 3817, 3818, 3819,

 3990,3991,3992,3993,3994,3995,3996,3997,3998,3999,
 4000, 4001, 4002, 4003, 4004, 4005, 4006, 4007, 4008, 4009, /* USE FOR PROBE */
 4010, 4011, 4012, 4013, 4014, 4015, 4016, 4017, 4018, 4019,
 4020,4021,4022,4023,4024,4025,4026,4027,4028,4029,4030,    /*function parameters*/
 4031,4032,4033,4034,4035,4036,4037,4038,4039,4040,     //4040 is M99
 4041,4042,4043,4044,4045,4046,4047,4048,4049,4050, // array 4041,4042 center x,y  4043,4044,executing piece row,column
 4051,4052,4053,4054,4055,4056,4057,4058,4059,4060,
 4061,4062,4063,4064,4065,4066,4067,4068,4069,4070,
 4071,4072,4073,4074,4075,4076,4077,4078,4079,4080,
 4081,4082,4083,4084,4085,4086,4087,4088,4089,4090,
 4091,4092,4093,4094,4095,4096,4097,4098,4099,
 4100, 4101, 4102, 4103, 4104, 4105, 4106, 4107, 4108, 4109, //get return value after m91
 4110, 4111, 4112, 4113, 4114, 4115, 4116, 4117, 4118, 4119,
 4120, 4121, 4122, 4123, 4124, 4125, 4126, 4127, 4128, 4129,
 4130, 4131, 4132, 4133, 4134, 4135, 4136, 4137, 4138, 4139, //array compensation
 4140, 4141, 4142, 4143, 4144, 4145, 4146, 4147, 4148, 4149, //ABC固定点坐标
 4150, 4151, 4152, 4153, 4154, 4155, 4156, 4157, 4158, 4159, //4150,精细镗孔偏移方向

 4200, 4201, 4202, 4203, 4204, 4205, 4206, 4207, 4208, 4209,
 4210, 4211, 4212, 4213, 4214, 4215, 4216, 4217, 4218, 4219,
 4220, 4221, 4222, 4223, 4224, 4225, 4226, 4227, 4228, 4229, //第二限位
 4270, 4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278, 4279,
 4280, 4281, 4282, 4283, 4284, 4285, 4286, 4287, 4288, 4289,
 4290, 4291, 4292, 4293, 4294, 4295, 4296, 4297, 4298, 4299,
    //tool info
 4300, 4301, 4302, 4303, 4304, 4305, 4306, 4307, 4308, 4309, 4310, 4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319,
 4320, 4321, 4322, 4323, 4324, 4325, 4326, 4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335, 4336, 4337, 4338, 4339,
 4340, 4341, 4342, 4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 4351, 4352, 4353, 4354, 4355, 4356, 4357, 4358, 4359,
 4360, 4361, 4362, 4363, 4364, 4365, 4366, 4367, 4368, 4369, 4370, 4371, 4372, 4373, 4374, 4375, 4376, 4377, 4378, 4379,
 4380, 4381, 4382, 4383, 4384, 4385, 4386, 4387, 4388, 4389, 4390, 4391, 4392, 4393, 4394, 4395, 4396, 4397, 4398, 4399,

 4400, 4401, 4402, 4403, 4404, 4405, 4406, 4407, 4408, 4409,4410, 4411, 4412, 4413, 4414, 4415, 4416, 4417, 4418, 4419,
 4420, 4421, 4422, 4423, 4424, 4425, 4426, 4427, 4428, 4429, 4430, 4431, 4432, 4433, 4434, 4435, 4436, 4437, 4438, 4439,
 4440, 4441, 4442, 4443, 4444, 4445, 4446, 4447, 4448, 4449, 4450, 4451, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459,
 4460, 4461, 4462, 4463, 4464, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479,
 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499,




 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509,

 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609,
 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619,
 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629,
 4630, 4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639,
 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649,
 4650, 4651, 4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659,

 4700, 4701, 4702, 4703, 4704, 4705, 4706, 4707, 4708, 4709, 4710, 4711, 4712, 4713, 4714, 4715, 4716, 4717, 4718, 4719, //4706开始，刀库Z2,b坐标
 4720, 4721, 4722, 4723, 4724, 4725, 4726, 4727, 4728, 4729, 4730, 4731, 4732, 4733, 4734, 4735, 4736, 4737, 4738, 4739,
 4740, 4741, 4742, 4743, 4744, 4745, 4746, 4747, 4748, 4749, 4750, 4751, 4752, 4753, 4754, 4755, 4756, 4757, 4758, 4759,
 4760, 4761, 4762, 4763, 4764, 4765, 4766, 4767, 4768, 4769, 4770, 4771, 4772, 4773, 4774, 4775, 4776, 4777, 4778, 4779,
 4780, 4781, 4782, 4783, 4784, 4785, 4786, 4787, 4788, 4789, 4790, 4791, 4792, 4793, 4794, 4795, 4796, 4797, 4798, 4799,
 4800, 4801, 4802, 4803, 4804, 4805, 4806, 4807, 4808, 4809, //4800开始，Z1坐标系+刀具长度
 4810, 4811, 4812, 4813, 4814, 4815, 4816, 4817, 4818, 4819, //4810开始，Z2坐标系+刀具长度

 4820, 4821, 4822, 4823, 4824, 4825, 4826, 4827, 4828, 4829, 4830, 4831, 4832, 4833, 4834, 4835, 4836, 4837, 4838, 4839, //4820开始，续上刀库Z2,b坐标
 4840, 4841, 4842, 4843, 4844, 4845, 4846, 4847, 4848, 4849, 4850, 4851, 4852, 4853, 4854, 4855, 4856, 4857, 4858, 4859,
 4860, 4861, 4862, 4863, 4864, 4865, 4866, 4867, 4868, 4869, 4870, 4871, 4872, 4873, 4874, 4875, 4876, 4877, 4878, 4879,
 4880, 4881, 4882, 4883, 4884, 4885, 4886, 4887, 4888, 4889, 4890, 4891, 4892, 4893, 4894, 4895, 4896, 4897, 4898, 4899,
 4900, 4901, 4902, 4903, 4904, 4905, 4906, 4907, 4908, 4909, 4910, 4911, 4912, 4913, 4914, 4915, 4916, 4917, 4918, 4919, //4906开始，刀库Z2,b坐标
 4920, 4921, 4922, 4923, 4924, 4925, 4926, 4927, 4928, 4929, 4930, 4931, 4932, 4933, 4934, 4935, 4936, 4937, 4938, 4939,
 4940, 4941, 4942, 4943, 4944, 4945, 4946, 4947, 4948, 4949, 4950, 4951, 4952, 4953, 4954, 4955, 4956, 4957, 4958, 4959,
 4960, 4961, 4962, 4963, 4964, 4965, 4966, 4967, 4968, 4969, 4970, 4971, 4972, 4973, 4974, 4975, 4976, 4977, 4978, 4979,
 4980, 4981, 4982, 4983, 4984, 4985, 4986, 4987, 4988, 4989, 4990, 4991, 4992, 4993, 4994, 4995, 4996, 4997, 4998, 4999,


 5040, 5041, 5042, 5043, 5044, 5045, 5046, 5047, 5048, 5049,
 5050, 5051, 5052, 5053, 5054, 5055, 5056, 5057, 5058, 5059,
 5060, 5061, 5062, 5063, 5064, 5065, 5066, 5067, 5068, 5069, 5070,              /* save the probe coor */

 5101, 5102, 5103,   /* PUBLIC offsets */
 5104, 5105, 5106, /* A, B, & C */
 5107, 5108, 5109, /* U, V, & W */
 5161, 5162, 5163,   /* G28 home */
 5164, 5165, 5166, /* A, B, & C */
 5167, 5168, 5169, /* U, V, & W */
 5181, 5182, 5183,   /* G30 home */
 5184, 5185, 5186, /* A, B, & C */
 5187, 5188, 5189, /* U, V, & W */
 5210, /* G92 is currently applied */
 5211, 5212, 5213,   /* G92 offsets */
 5214, 5215, 5216, /* A, B, & C */
 5217, 5218, 5219, /* U, V, & W */
 5220,               /* selected coordinate */
 5221, 5222, 5223,   /* coordinate system 1 */
 5224, 5225, 5226, /* A, B, & C */
 5227, 5228, 5229, /* U, V, & W */
 5230,
 5241, 5242, 5243,   /* coordinate system 2 */
 5244, 5245, 5246, /* A, B, & C */
 5247, 5248, 5249, /* U, V, & W */
 5250,
 5261, 5262, 5263,   /* coordinate system 3 */
 5264, 5265, 5266, /* A, B, & C */
 5267, 5268, 5269, /* U, V, & W */
 5270,
 5281, 5282, 5283,   /* coordinate system 4 */
 5284, 5285, 5286, /* A, B, & C */
 5287, 5288, 5289, /* U, V, & W */
 5290,
 5301, 5302, 5303,   /* coordinate system 5 */
 5304, 5305, 5306, /* A, B, & C */
 5307, 5308, 5309, /* U, V, & W */
 5310,
 5321, 5322, 5323,   /* coordinate system 6 */
 5324, 5325, 5326, /* A, B, & C */
 5327, 5328, 5329, /* U, V, & W */
 5330,
 5341, 5342, 5343,   /* coordinate system 7 */
 5344, 5345, 5346, /* A, B, & C */
 5347, 5348, 5349, /* U, V, & W */
 5350,
 5361, 5362, 5363,   /* coordinate system 8 */
 5364, 5365, 5366, /* A, B, & C */
 5367, 5368, 5369, /* U, V, & W */
 5370,
 5381, 5382, 5383,   /* coordinate system 9 */
 5384, 5385, 5386, /* A, B, & C */
 5387, 5388, 5389, /* U, V, & W */
 5390,
 RS274NGC_MAX_PARAMETERS
};

const int Interp::_readonly_parameters[] = {
 5400, // tool toolno
 5401, // tool x offset
 5402, // tool y offset
 5403, // tool z offset
 5404, // tool a offset
 5405, // tool b offset
 5406, // tool c offset
 5407, // tool u offset
 5408, // tool v offset
 5409, // tool w offset
 5410, // tool diameter
 5411, // tool frontangle
 5412, // tool backangle
 5413, // tool orientation
 5420, 5421, 5422, 5423, 5424, 5425, 5426, 5427, 5428, // current X Y ... W
};
const int Interp::_n_readonly_parameters = sizeof(_readonly_parameters)/sizeof(int);

/* _readers is an array of pointers to functions that read.
   It is used by read_one_item.

   Each read function is placed in the array according to the ASCII character it
   corresponds to. Whilst a switch statement could have been used in read_one_item,
   using an array of function pointers allows a new read_foo to be added quickly
   in this one table.
   
   At some point, it may be advantageous to add a read_$ or read_n for perhaps
   macro or jump labels..
   */
const read_function_pointer Interp::default_readers[256] = {
/* 00 */
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* 10 */
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/* 20 */
0, 0, 0,
&Interp::read_parameter_setting, // reads # or ASCII 0x23
0, 0, 0, 0,
&Interp::read_comment, // reads ( or ASCII 0x28
0, 0, 0, 0, 0, 0, 0, 
/* 30 */
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
&Interp::read_semicolon, 
0, 0, 0, 0,
/* 40 */
&Interp::read_atsign, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
/* 50 */
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, &Interp::read_carat, 0,
/* 60 */
0,
&Interp::read_a, // reads a or ASCII 0x61
&Interp::read_b, // reads b or ASCII 0x62
&Interp::read_c, // reads c or ASCII 0x63
&Interp::read_d, // reads d or ASCII 0x64
&Interp::read_e, // reads d or ASCII 0x65
&Interp::read_f, // reads f or ASCII 0x66
&Interp::read_g, // reads g or ASCII 0x67
&Interp::read_h, // reads h or ASCII 0x68
&Interp::read_i, // reads i or ASCII 0x69
&Interp::read_j, // reads j or ASCII 0x6A
&Interp::read_k, // reads k or ASCII 0x6B
&Interp::read_l, // reads l or ASCII 0x6C
&Interp::read_m, // reads m or ASCII 0x6D
0, 0,
&Interp::read_p, // reads p or ASCII 0x70
&Interp::read_q, // reads q or ASCII 0x71
&Interp::read_r, // reads r or ASCII 0x72
&Interp::read_s, // reads s or ASCII 0x73
&Interp::read_t, // reads t or ASCII 0x74
&Interp::read_u,
&Interp::read_v,
&Interp::read_w,
&Interp::read_x, // reads x or ASCII 0x78
&Interp::read_y, // reads y or ASCII 0x79
&Interp::read_z}; // reads z or ASCII 0x7A
// *INDENT-ON*
// And now indent can continue.
/****************************************************************************/

/* There are four global variables*. The first three are _gees, _ems,
and _readers. The last one, declared here, is for interpreter settings */

setup Interp::_setup;

/* The notion of "global variables" is a misnomer - These last four should only
   be accessable by the interpreter and not exported to the rest of emc */


